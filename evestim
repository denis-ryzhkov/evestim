#!/usr/bin/env python

usage = """
evestim - evidence based estimator

Based on ideas from https://www.joelonsoftware.com/2007/10/26/evidence-based-scheduling/
but simplified and tailored for personal use:
- to improve inner estimation ability by seeing the history,
- to amortize external estimations told to manager.

The core idea is that you mostly underestimate,
but you can become consistent in how you underestimate,
and so real time can be predicted.

Edit "evestim.txt" file and just run it.
It will update itself calling "evestim" script via shebang line.

Lines starting with anything but digit or "-" are comments.

Each other line is:

    {velocity} {estimation} {real} {title with spaces}
    0.4 2 5 https://dev.example.com/issues/1230 - Some done task.
    0.6 1 1.7 https://dev.example.com/issues/1231 - Other done task.

Estimation and real are hours or whatever fits you better.

If velocity is "-", then script will calculate velocity = estimation / real:

    - 4 8 https://dev.example.com/issues/1232 - Just done task.
    -->
    0.5 4 8 https://dev.example.com/issues/1232 - Just done task.

But if real is "-" too, then script will calculate the range of velocity and real:

    - 4 - https://dev.example.com/issues/1233 - Open task.
    -->
    0.4-0.6 4 6.7-10.0 https://dev.example.com/issues/1233 - Open task.

Ranges are recalculated each time, as if they were just "-".

Cut too old lines and paste them to archive file
to work with fresh (and hopefully improved) min/max velocity.

TODO: Move from trivial min/max to more precise probability percentiles.

Velocity is limited in config below to avoid division by zero, infinities, etc.

evestim version 0.1.0
Copyright (C) 2017 by Denis Ryzhkov <denisr@denisr.com>
MIT License, see http://opensource.org/licenses/MIT
"""

### import

import sys
from traceback import print_exc

### config

WORST_MIN_VELOCITY = 0.1
WORST_MAX_VELOCITY = 10.0
PRECISION = 1

EXPECTED_FILE_NAME = 'evestim.txt'
FIELDS_SEP = ' '
RANGE_SEP = '-'

FLOAT_FORMAT = '{{:.{}f}}'.format(PRECISION)
RANGE_FORMAT = FLOAT_FORMAT + RANGE_SEP + FLOAT_FORMAT

### update

def update(file_name):
    assert file_name.endswith(EXPECTED_FILE_NAME), (file_name, EXPECTED_FILE_NAME)

    with open(file_name, 'r') as f:
        lines = list(f)

    new_lines = []

    # Inversion is required to find real min/max later:
    min_velocity = WORST_MAX_VELOCITY
    max_velocity = WORST_MIN_VELOCITY

    for line in lines:
        if line and (line[0].isdigit() or line[0] == RANGE_SEP):
            velocity, estimation, real, title = line.split(FIELDS_SEP, 3)

            ### velocity = "-" or range

            if RANGE_SEP in velocity:

                ### real = "-" or range

                if RANGE_SEP in real:

                    velocity = RANGE_FORMAT.format(
                        min(min_velocity, max_velocity),
                        max(min_velocity, max_velocity),
                    )  # Extra min/max ensures even initial inverted values will be in ascending order.

                    min_real = float(estimation) / max_velocity
                    max_real = float(estimation) / min_velocity
                    real = RANGE_FORMAT.format(
                        min(min_real, max_real),
                        max(min_real, max_real),
                    )

                ### real is exact number

                else:
                    velocity = FLOAT_FORMAT.format(float(estimation) / float(real))

            ### update min/max velocity

            if RANGE_SEP not in velocity:
                v = float(velocity)
                if min_velocity > v:
                    min_velocity = max(v, WORST_MIN_VELOCITY)
                if max_velocity < v:
                    max_velocity = min(v, WORST_MAX_VELOCITY)

            ### output

            line = FIELDS_SEP.join((velocity, estimation, real, title))

        new_lines.append(line)

    new_lines = ''.join(new_lines)

    with open(file_name, 'w') as f:
        f.write(new_lines)

### main

if __name__ == '__main__':
    try:
        update(sys.argv[1])

    except Exception:
        print(usage)
        print_exc()
