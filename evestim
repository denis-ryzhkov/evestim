#!/usr/bin/env python

usage = """
evestim version 0.1.2
Copyright (C) 2017 by Denis Ryzhkov <denisr@denisr.com>
MIT License, see http://opensource.org/licenses/MIT

Usage docs: https://github.com/denis-ryzhkov/evestim
"""

### import

import sys
from traceback import print_exc

### config

WORST_MIN_VELOCITY = 0.1
WORST_MAX_VELOCITY = 10.0
PRECISION = 1

EXPECTED_FILE_NAME = 'evestim.txt'
FIELDS_SEP = ' '
RANGE_SEP = '-'
COMMENT_PREFIX = '#'

FLOAT_FORMAT = '{{:.{}f}}'.format(PRECISION)
RANGE_FORMAT = FLOAT_FORMAT + RANGE_SEP + FLOAT_FORMAT

### update

def update(file_name):
    assert file_name.endswith(EXPECTED_FILE_NAME), (file_name, EXPECTED_FILE_NAME)

    with open(file_name, 'r') as f:
        lines = list(f)

    new_lines = []

    # Inversion is required to find real min/max later:
    min_velocity = WORST_MAX_VELOCITY
    max_velocity = WORST_MIN_VELOCITY

    for line in lines:
        if line and not line.startswith(COMMENT_PREFIX) and (line[0].isdigit() or line[0] == RANGE_SEP):
            velocity, estimation, real, title = line.split(FIELDS_SEP, 3)

            ### velocity = "-" or range

            if RANGE_SEP in velocity:

                ### real = "-" or range

                if RANGE_SEP in real:

                    velocity = RANGE_FORMAT.format(
                        min(min_velocity, max_velocity),
                        max(min_velocity, max_velocity),
                    )  # Extra min/max ensures even initial inverted values will be in ascending order.

                    min_real = float(estimation) / max_velocity
                    max_real = float(estimation) / min_velocity
                    real = RANGE_FORMAT.format(
                        min(min_real, max_real),
                        max(min_real, max_real),
                    )

                ### real is exact number

                else:
                    velocity = FLOAT_FORMAT.format(float(estimation) / float(real))

            ### update min/max velocity

            if RANGE_SEP not in velocity:
                v = float(velocity)
                if min_velocity > v:
                    min_velocity = max(v, WORST_MIN_VELOCITY)
                if max_velocity < v:
                    max_velocity = min(v, WORST_MAX_VELOCITY)

            ### output

            line = FIELDS_SEP.join((velocity, estimation, real, title))

        new_lines.append(line)

    new_lines = ''.join(new_lines)

    with open(file_name, 'w') as f:
        f.write(new_lines)

### main

if __name__ == '__main__':
    try:
        file_name = sys.argv[1] if len(sys.argv) > 1 else EXPECTED_FILE_NAME
        update(file_name)

    except Exception:
        print(usage)
        print_exc()
