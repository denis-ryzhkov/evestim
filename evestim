#!/usr/bin/env python

usage = """
evestim version 0.2.0
Copyright (C) 2017 by Denis Ryzhkov <denisr@denisr.com>
MIT License, see http://opensource.org/licenses/MIT

Usage docs: https://github.com/denis-ryzhkov/evestim
"""

### import

from collections import deque
import sys
from traceback import print_exc

### config

HISTORY_DEPTH = 100
DECIMAL_PLACES = 1
MIN_OPTIMISM = 0.1
MAX_OPTIMISM = 10.0

EXPECTED_FILE_NAME = 'evestim.txt'
FIELDS_SEP = ' '
RANGE_SEP = '-'
COMMENT_PREFIX = '#'

NUMBER_FORMAT = '{{:.{}f}}'.format(DECIMAL_PLACES)
RANGE_FORMAT = NUMBER_FORMAT + RANGE_SEP + NUMBER_FORMAT

### update

def update(file_name):

    ### input

    assert file_name.endswith(EXPECTED_FILE_NAME), (file_name, EXPECTED_FILE_NAME)

    with open(file_name, 'r') as f:
        lines = list(f)

    new_lines = []
    optimism_samples = deque()

    for line in lines:
        if line and not line.startswith(COMMENT_PREFIX) and (line[0].isdigit() or line[0] == RANGE_SEP):
            assert line.count(FIELDS_SEP) >= 3, line
            optimism, estimate, real, title = line.split(FIELDS_SEP, 3)

            ### a new task

            if RANGE_SEP in real:
                assert RANGE_SEP in optimism, line

                min_optimism = min(optimism_samples) if optimism_samples else MIN_OPTIMISM
                max_optimism = max(optimism_samples) if optimism_samples else MAX_OPTIMISM
                optimism = RANGE_FORMAT.format(min_optimism, max_optimism)
                real = RANGE_FORMAT.format(min_optimism * float(estimate), max_optimism * float(estimate))

            ### just done task

            elif RANGE_SEP in optimism:
                optimism = NUMBER_FORMAT.format(float(real) / float(estimate))

            ### done task

            if RANGE_SEP not in optimism:
                optimism_samples.append(float(optimism))
                if len(optimism_samples) > HISTORY_DEPTH:
                    optimism_samples.popleft()

            ### output

            line = FIELDS_SEP.join((optimism, estimate, real, title))

        new_lines.append(line)

    new_lines = ''.join(new_lines)

    with open(file_name, 'w') as f:
        f.write(new_lines)

### main

if __name__ == '__main__':
    try:
        file_name = sys.argv[1] if len(sys.argv) > 1 else EXPECTED_FILE_NAME
        update(file_name)

    except Exception:
        print(usage)
        print_exc()
